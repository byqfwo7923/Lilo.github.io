name: Deploy
on:
  push:
    branches: main
  pull_request:
    branches: main

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    permissions:
      id-token: write # Needed for auth with Deno Deploy
      contents: read # Needed to clone the repository

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Install Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Build step
        run: "import { serve } from \"https://deno.land/std@0.208.0/http/server.ts\"; import { decode as base64Decode, encode as base64Encode } from \"https://deno.land/std@0.208.0/encoding/base64.ts\";  interface UserInfo {   rt: string;   user_id: string;   email: string;   client_uuid: string; }  interface Message {   role: string;   content: string | OpenAIMessageContent[] | null;   tool_call_id?: string;   tool_calls?: any[]; }  interface OpenAIMessageContent {   type: \"text\" | \"image_url\";   text?: string;   image_url?: { [key: string]: string }; }  interface OpenAITool {   type: \"function\";   function: {     name: string;     description?: string;     parameters?: any;   }; }  interface ChatCompletionRequest {   messages: Message[];   stream?: boolean;   model?: string;   tools?: OpenAITool[]; }  const HIGHLIGHT_BASE_URL = \"https://chat-backend.highlightai.com\"; const USER_AGENT = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Highlight/1.3.61 Chrome/132.0.6834.210 Electron/34.5.8 Safari/537.36\";  const accessTokens: Map<string, { access_token: string; expires_at: number }> = new Map(); const modelCache: Map<string, any> = new Map();  const Hr = {   r: [87, 78, 72, 56, 79, 48, 122, 79, 107, 104, 82, 119, 51, 100, 78, 90, 85, 85, 69, 107, 90, 116, 87, 48, 108,       53, 83, 84, 70, 81, 121, 69],   m: [27, 26, 25, 22, 24, 21, 17, 12, 30, 19, 20, 14, 31, 8, 18, 10, 13, 5, 29, 7, 16, 6, 28, 23, 9, 15, 4, 0, 11,       2, 3, 1] };  const jr = {   r: [87, 90, 109, 107, 53, 105, 81, 89, 103, 107, 68, 49, 68, 105, 106, 77, 49, 106, 53, 78, 77, 78, 106, 106, 61,       77, 89, 51, 66, 79, 86, 89, 106, 65, 106, 52, 89, 77, 87, 106, 89, 122, 78, 90, 65, 89, 50, 105, 61, 90, 106,       66, 48, 53, 71, 89, 87, 52, 81, 84, 78, 90, 74, 78, 103, 50, 70, 79, 51, 50, 50, 77, 122, 108, 84, 81, 120,       90, 89, 89, 89, 79, 119, 122, 121, 108, 69, 77],   m: [65, 20, 1, 6, 31, 63, 74, 12, 85, 78, 33, 3, 41, 19, 45, 52, 75, 21, 23, 16, 56, 36, 5, 71, 87, 68, 72, 15,       18, 32, 82, 8, 17, 54, 83, 35, 28, 48, 49, 77, 30, 25, 10, 38, 22, 50, 29, 11, 86, 64, 57, 70, 47, 67, 81, 44,       61, 7, 58, 13, 84, 76, 42, 24, 46, 37, 62, 80, 27, 51, 73, 34, 69, 39, 53, 2, 79, 60, 26, 0, 66, 40, 55, 9,       59, 43, 14, 4] };  async function pbkdf2(password: string, salt: Uint8Array, iterations: number, keyLen: number): Promise<Uint8Array> {   const key = await crypto.subtle.importKey(     \"raw\",     new TextEncoder().encode(password),     { name: \"PBKDF2\" },     false,     [\"deriveBits\"]   );      const derivedBits = await crypto.subtle.deriveBits(     {       name: \"PBKDF2\",       salt: salt,       iterations: iterations,       hash: \"SHA-256\"     },     key,     keyLen * 8   );      return new Uint8Array(derivedBits); }  function Ah(n: number[], e: number[]): number[] {   const t: number[] = new Array(n.length);   for (let s = 0; s < e.length; s++) {     t[e[s]] = n[s];   }   return t; }  function Fl(n: number[], e: number[]): string {   const t = Ah(n, e);   const s = String.fromCharCode(...t);   const o = base64Decode(s);   const i = Array.from(new Uint8Array(o)).reverse();   return new TextDecoder().decode(new Uint8Array(i)); }  async function Th(n: string): Promise<Uint8Array> {   const salt = new TextEncoder().encode(Fl(Hr.r, Hr.m));   return await pbkdf2(n, salt, 100000, 32); }  async function kh(n: { userId: string; clientUUID: string }, fixedIv?: Uint8Array): Promise<string> {   const e = await Th(n.userId);   const t = fixedIv || crypto.getRandomValues(new Uint8Array(16));      const data = {     ...n,     apiKey: Fl(jr.r, jr.m)   };      const jsonStr = JSON.stringify(data);   const jsonBytes = new TextEncoder().encode(jsonStr);      // PKCS7 padding   const padLen = 16 - (jsonBytes.length % 16);   const paddedData = new Uint8Array(jsonBytes.length + padLen);   paddedData.set(jsonBytes);   paddedData.fill(padLen, jsonBytes.length);      const key = await crypto.subtle.importKey(\"raw\", e, { name: \"AES-CBC\" }, false, [\"encrypt\"]);   const encrypted = await crypto.subtle.encrypt({ name: \"AES-CBC\", iv: t }, key, paddedData);      const tHex = Array.from(t).map(b => b.toString(16).padStart(2, '0')).join('');   const encryptedHex = Array.from(new Uint8Array(encrypted)).map(b => b.toString(16).padStart(2, '0')).join('');      return `${tHex}:${encryptedHex}`; }  function H7t(t = 12): string {   const randomBytes = crypto.getRandomValues(new Uint8Array(t));   return Array.from(randomBytes).map(b => b.toString(16).padStart(2, '0')).join(''); }  async function getIdentifier(userId: string, clientUUID: string, fixedIv?: Uint8Array): Promise<string> {   const t = await kh({ userId, clientUUID }, fixedIv);   return `${H7t()}:${t}`; }  // ç»å½åè½ async function login(code: string): Promise<UserInfo> {   console.log(\"å¼å§ç»å½æµç¨...\");      const chromeDeviceId = crypto.randomUUID();   const deviceId = crypto.randomUUID();      // ç¬¬ä¸æ­¥ï¼äº¤æ¢codeè·åtokens   const exchangeResponse = await fetch(`${HIGHLIGHT_BASE_URL}/api/v1/auth/exchange`, {     method: 'POST',     headers: {       'Content-Type': 'application/json',     },     body: JSON.stringify({       code: code,       amplitudeDeviceId: chromeDeviceId,     }),   });      if (!exchangeResponse.ok) {     const errorText = await exchangeResponse.text();     console.error(`HTTPéè¯¯: ${exchangeResponse.status} ${errorText}`);          if (exchangeResponse.status === 500) {       throw new Error(\"æå¡å¨åé¨éè¯¯ï¼è¯·ç¨åéè¯\");     } else if (exchangeResponse.status === 400) {       throw new Error(\"è¯·æ±æ ¼å¼éè¯¯ï¼è¯·æ£æ¥ææä»£ç æ¯å¦æ­£ç¡®\");     } else {       throw new Error(`ç»å½æå¡ææ¶ä¸å¯ç¨ (éè¯¯ä»£ç : ${exchangeResponse.status})`);     }   }      const exchangeData = await exchangeResponse.json();   if (!exchangeData.success) {     console.error(`ç»å½å¤±è´¥è¯¦æ:`, exchangeData);          // åå¥½çéè¯¯æ¶æ¯æ å°     const errorMessage = exchangeData.error || \"æªç¥éè¯¯\";          if (errorMessage.includes(\"expired\") || errorMessage.includes(\"invalid\")) {       throw new Error(\"ææä»£ç å·²è¿æææ æãææä»£ç åªè½ä½¿ç¨ä¸æ¬¡ï¼è¯·éæ°ç»å½è·åæ°çä»£ç ã\");     } else if (errorMessage.includes(\"not found\")) {       throw new Error(\"ææä»£ç ä¸å­å¨ï¼è¯·æ£æ¥æ¯å¦å¤å¶å®æ´ã\");     } else if (errorMessage.includes(\"already used\")) {       throw new Error(\"æ­¤ææä»£ç å·²è¢«ä½¿ç¨è¿ï¼è¯·éæ°ç»å½è·åæ°çä»£ç ã\");     } else if (errorMessage.includes(\"rate limit\")) {       throw new Error(\"è¯·æ±è¿äºé¢ç¹ï¼è¯·ç¨ç­çå»åéè¯ã\");     } else {       throw new Error(`ç»å½å¤±è´¥: ${errorMessage}ãå¦æé®é¢æç»­å­å¨ï¼è¯·éæ°è·åææä»£ç ã`);     }   }      const accessToken = exchangeData.data.accessToken;   const refreshToken = exchangeData.data.refreshToken;      // ç¬¬äºæ­¥ï¼æ³¨åå®¢æ·ç«¯   const clientResponse = await fetch(`${HIGHLIGHT_BASE_URL}/api/v1/users/me/client`, {     method: 'POST',     headers: {       'Content-Type': 'application/json',       'Authorization': `Bearer ${accessToken}`,     },     body: JSON.stringify({       client_uuid: deviceId,     }),   });      if (!clientResponse.ok) {     console.warn(`å®¢æ·ç«¯æ³¨åå¤±è´¥: ${clientResponse.status}ï¼ä½ç»§ç»­è¿è¡...`);   }      // ç¬¬ä¸æ­¥ï¼è·åç¨æ·ä¿¡æ¯   const profileResponse = await fetch(`${HIGHLIGHT_BASE_URL}/api/v1/auth/profile`, {     headers: {       'Authorization': `Bearer ${accessToken}`,     },   });      if (!profileResponse.ok) {     const errorText = await profileResponse.text();     console.error(`è·åç¨æ·ä¿¡æ¯å¤±è´¥: ${profileResponse.status} ${errorText}`);     throw new Error(`æ æ³è·åç¨æ·ä¿¡æ¯ï¼è¯·éè¯ãå¦æé®é¢æç»­å­å¨ï¼è¯·éæ°ç»å½ã`);   }      const profileData = await profileResponse.json();   const userId = profileData.id;   const email = profileData.email;      console.log(`ç»å½æå: ${userId} ${email}`);      const userInfo: UserInfo = {     rt: refreshToken,     user_id: userId,     email: email,     client_uuid: deviceId,   };      // çæAPI Key   const apiKey = base64Encode(new TextEncoder().encode(JSON.stringify(userInfo)));   console.log(\"----API KEY----\");   console.log(apiKey);   console.log(\"----API KEY----\");      return userInfo; }  // å·¥å·å½æ° function parseApiKey(apiKeyBase64: string): UserInfo | null {   try {     const decoded = new TextDecoder().decode(base64Decode(apiKeyBase64));     return JSON.parse(decoded);   } catch {     return null;   } }  function parseJwtPayload(jwtToken: string): any | null {   try {     const parts = jwtToken.split(\".\");     if (parts.length !== 3) return null;          let payload = parts[1];     const padding = payload.length % 4;     if (padding) {       payload += \"=\".repeat(4 - padding);     }          const decoded = new TextDecoder().decode(base64Decode(payload));     return JSON.parse(decoded);   } catch {     return null;   } }  async function refreshAccessToken(rt: string): Promise<string> {   const response = await fetch(`${HIGHLIGHT_BASE_URL}/api/v1/auth/refresh`, {     method: 'POST',     headers: {       'Content-Type': 'application/json',     },     body: JSON.stringify({ refreshToken: rt }),   });      if (!response.ok) {     throw new Error(\"æ æ³å·æ°access token\");   }      const respJson = await response.json();   if (!respJson.success) {     throw new Error(\"å·æ°access tokenå¤±è´¥\");   }      const newAccessToken = respJson.data.accessToken;   const payload = parseJwtPayload(newAccessToken);   const expiresAt = payload?.exp || Math.floor(Date.now() / 1000) + 3600;      accessTokens.set(rt, {     access_token: newAccessToken,     expires_at: expiresAt,   });      return newAccessToken; }  async function getAccessToken(rt: string): Promise<string> {   const tokenInfo = accessTokens.get(rt);   const currentTime = Math.floor(Date.now() / 1000);      if (tokenInfo && tokenInfo.expires_at > currentTime + 60) {     return tokenInfo.access_token;   }      return await refreshAccessToken(rt); }  async function fetchModelsFromUpstream(accessToken: string): Promise<void> {   const response = await fetch(`${HIGHLIGHT_BASE_URL}/api/v1/models`, {     headers: {       'Authorization': `Bearer ${accessToken}`,       'User-Agent': USER_AGENT,     },   });      if (!response.ok) {     throw new Error(\"è·åæ¨¡ååè¡¨å¤±è´¥\");   }      const respJson = await response.json();   if (!respJson.success) {     throw new Error(\"è·åæ¨¡åæ°æ®å¤±è´¥\");   }      modelCache.clear();   for (const model of respJson.data) {     modelCache.set(model.name, {       id: model.id,       name: model.name,       provider: model.provider,       isFree: model.pricing?.isFree || false,     });   } }  async function getModels(accessToken: string): Promise<Map<string, any>> {   if (modelCache.size === 0) {     await fetchModelsFromUpstream(accessToken);   }   return modelCache; }  function getHighlightHeaders(accessToken: string, identifier?: string): Record<string, string> {   const headers: Record<string, string> = {     \"accept\": \"*/*\",     \"accept-encoding\": \"gzip, deflate, br, zstd\",     \"accept-language\": \"zh-CN\",     \"authorization\": `Bearer ${accessToken}`,     \"content-type\": \"application/json\",     \"user-agent\": USER_AGENT,   };      if (identifier) {     headers[\"identifier\"] = identifier;   }      return headers; }  function formatMessagesToPrompt(messages: Message[]): string {   const formattedMessages: string[] = [];   for (const message of messages) {     if (message.role) {       if (message.content) {         if (Array.isArray(message.content)) {           for (const item of message.content) {             formattedMessages.push(`${message.role}: ${item.text}`);           }         } else {           formattedMessages.push(`${message.role}: ${message.content}`);         }       }       if (message.tool_calls) {         formattedMessages.push(`${message.role}: ${JSON.stringify(message.tool_calls)}`);       }       if (message.tool_call_id) {         formattedMessages.push(`${message.role}: tool_call_id: ${message.tool_call_id} ${message.content}`);       }     }   }   return formattedMessages.join(\"\n\n\"); }  function formatOpenAITools(openaiTools?: OpenAITool[]): any[] {   if (!openaiTools) return [];      return openaiTools.map(tool => ({     name: tool.function.name,     description: tool.function.description,     parameters: tool.function.parameters,   })); }  // CORS å¤´é¨çæå½æ° function getCorsHeaders(): Record<string, string> {   return {     \"Access-Control-Allow-Origin\": \"*\",     \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",     \"Access-Control-Allow-Headers\": \"Content-Type, Authorization, X-Requested-With\",     \"Access-Control-Max-Age\": \"86400\", // 24å°æ¶   }; }  // å¤çé¢æ£è¯·æ± function handleOptionsRequest(): Response {   return new Response(null, {     status: 204,     headers: getCorsHeaders()   }); }  // HTTPå¤çå½æ° async function handleRequest(request: Request): Promise<Response> {   const url = new URL(request.url);   const path = url.pathname;      // å¤çé¢æ£è¯·æ±   if (request.method === \"OPTIONS\") {     return handleOptionsRequest();   }    // åç«¯é¡µé¢   if (path === \"/\" || path === \"/index.html\") {     const html = ` <!DOCTYPE html> <html lang=\"zh-CN\"> <head>     <meta charset=\"UTF-8\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">     <title>Highlight AI API</title>     <style>         * {             margin: 0;             padding: 0;             box-sizing: border-box;         }                  body {             font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;             background: #f5f5f7;             color: #1d1d1f;             line-height: 1.6;             font-size: 16px;             -webkit-font-smoothing: antialiased;             text-rendering: optimizeLegibility;         }                  .container {             max-width: 720px;             margin: 0 auto;             padding: 20px 16px;         }                  .header {             text-align: center;             margin-bottom: 40px;             padding-bottom: 20px;             border-bottom: 1px solid #e5e5e7;         }                  .header h1 {             font-size: 36px;             font-weight: 700;             letter-spacing: -0.02em;             color: #1d1d1f;             margin-bottom: 12px;         }                  .header p {             font-size: 18px;             color: #6e6e73;             font-weight: 400;         }                  .section {             background: #ffffff;             border-radius: 12px;             padding: 20px;             margin-bottom: 16px;             border: 1px solid #e5e5e7;         }                  .section-title {             font-size: 20px;             font-weight: 600;             color: #1d1d1f;             margin-bottom: 16px;             display: flex;             align-items: center;             gap: 10px;         }                  .step-number {             width: 28px;             height: 28px;             background: #1d1d1f;             color: white;             border-radius: 50%;             display: flex;             align-items: center;             justify-content: center;             font-size: 14px;             font-weight: 600;         }                  .section-content {             color: #6e6e73;             font-size: 15px;             line-height: 1.4;             margin-bottom: 16px;         }                  .url-box {             background: #f5f5f7;             border: 1px solid #d2d2d7;             border-radius: 8px;             padding: 12px;             margin: 12px 0;             font-family: 'SF Mono', Monaco, monospace;             font-size: 13px;             color: #1d1d1f;             word-break: break-all;             line-height: 1.3;         }                  .form-group {             margin: 16px 0;         }                  .form-label {             display: block;             font-size: 15px;             font-weight: 500;             color: #1d1d1f;             margin-bottom: 6px;         }                  .form-input {             width: 100%;             padding: 12px 16px;             border: 1px solid #d2d2d7;             border-radius: 8px;             font-size: 15px;             background: #ffffff;             color: #1d1d1f;             transition: border-color 0.15s ease;         }                  .form-input:focus {             outline: none;             border-color: #007aff;         }                  .form-input::placeholder {             color: #a1a1a6;         }                  .btn {             display: inline-block;             width: 100%;             padding: 12px 20px;             background: #1d1d1f;             color: #ffffff;             text-decoration: none;             font-size: 15px;             font-weight: 500;             border: none;             border-radius: 8px;             cursor: pointer;             transition: background-color 0.15s ease;             text-align: center;         }                  .btn:hover {             background: #424245;         }                  .btn:disabled {             background: #d2d2d7;             color: #a1a1a6;             cursor: not-allowed;         }                  .btn-secondary {             background: #f5f5f7;             color: #1d1d1f;             border: 1px solid #d2d2d7;         }                  .btn-secondary:hover {             background: #e5e5e7;         }                  .btn-small {             padding: 8px 16px;             font-size: 14px;             width: auto;             display: inline-block;         }                  .btn-test {             background: #007aff;             margin-left: 8px;         }                  .btn-test:hover {             background: #0056cc;         }                  .loading {             display: none;             text-align: center;             padding: 16px;             color: #6e6e73;             font-size: 15px;         }                  .loading-spinner {             width: 16px;             height: 16px;             border: 2px solid #d2d2d7;             border-top: 2px solid #1d1d1f;             border-radius: 50%;             display: inline-block;             animation: spin 1s linear infinite;             margin-right: 8px;             vertical-align: middle;         }                  @keyframes spin {             0% { transform: rotate(0deg); }             100% { transform: rotate(360deg); }         }                  .result {             margin-top: 16px;             padding: 16px;             border-radius: 8px;             display: none;         }                  .result.success {             background: #f0fdf4;             border: 1px solid #bbf7d0;             color: #166534;         }                  .result.error {             background: #fef2f2;             border: 1px solid #fecaca;             color: #dc2626;         }                  .result h4 {             font-size: 16px;             font-weight: 600;             margin-bottom: 8px;         }                  .api-key-section {             margin-top: 16px;             padding: 16px;             background: #f8f9fa;             border-radius: 8px;             border: 1px solid #e5e5e7;         }                  .api-key-label {             font-weight: 600;             margin-bottom: 8px;             color: #1d1d1f;             font-size: 14px;         }                  .api-key-box {             background: #ffffff;             border: 1px solid #d2d2d7;             border-radius: 6px;             padding: 12px;             font-family: 'SF Mono', Monaco, monospace;             font-size: 12px;             word-break: break-all;             color: #1d1d1f;             margin-bottom: 8px;         }                  .copy-btn {             background: #007aff;             color: white;             border: none;             padding: 6px 12px;             border-radius: 6px;             font-size: 13px;             font-weight: 500;             cursor: pointer;         }                  .copy-btn:hover {             background: #0056cc;         }                  .success-message {             margin-top: 16px;             padding: 16px;             background: #f0fdf4;             border-radius: 8px;             border: 1px solid #bbf7d0;         }                  .success-title {             font-weight: 600;             color: #166534;             margin-bottom: 6px;             font-size: 14px;         }                  .success-content {             color: #166534;             line-height: 1.4;             font-size: 14px;         }                  .success-content code {             background: #ffffff;             padding: 2px 6px;             border-radius: 4px;             font-family: 'SF Mono', Monaco, monospace;             font-size: 12px;             border: 1px solid #bbf7d0;         }                  .info-section {             background: #f8f9fa;             border-radius: 8px;             padding: 16px;             margin-top: 16px;             border: 1px solid #e5e5e7;         }                  .info-title {             font-size: 16px;             font-weight: 600;             color: #1d1d1f;             margin-bottom: 12px;         }                  .models-grid {             display: grid;             gap: 8px;             margin-top: 12px;         }                  .model-item {             display: flex;             justify-content: space-between;             align-items: center;             padding: 10px;             background: #ffffff;             border: 1px solid #e5e5e7;             border-radius: 6px;         }                  .model-name {             font-weight: 500;             color: #1d1d1f;             font-size: 14px;         }                  .model-provider {             font-size: 12px;             color: #6e6e73;         }                  .input-row {             display: flex;             gap: 8px;             align-items: stretch;         }                  .input-row .form-input {             flex: 1;         }                  .input-row .btn {             height: auto;             min-height: 44px;             display: flex;             align-items: center;             justify-content: center;         }                  @media (max-width: 768px) {             .container {                 padding: 16px 12px;             }                          .header h1 {                 font-size: 28px;             }                          .header p {                 font-size: 16px;             }                          .section {                 padding: 16px;             }                          .input-row {                 flex-direction: column;                 gap: 8px;             }                          .btn-small {                 width: 100%;             }         }     </style> </head> <body>     <div class=\"container\">         <div class=\"header\">             <h1>Highlight 2 API</h1>         </div>                  <div class=\"info-section\">             <div class=\"info-title\">æ¯æçæ¨¡å</div>             <div id=\"modelsList\">                 <div style=\"text-align: center; color: #6e6e73; padding: 20px;\">                     è¯·åè·å API Key ä»¥æ¥çå¯ç¨æ¨¡å                 </div>             </div>         </div>                  <div class=\"section\">             <div class=\"section-title\">                 <span class=\"step-number\">1</span>                 API Key æææ§æ£æµ             </div>             <div class=\"section-content\">                 æ¨å¯ä»¥ä½¿ç¨ç°æç API Keyï¼æèéè¿ç»å½çææ°ç API Keyï¼             </div>                          <div class=\"form-group\">                 <label class=\"form-label\" for=\"apiKeyInput\">API Key</label>                 <div class=\"input-row\">                     <input                          type=\"text\"                          id=\"apiKeyInput\"                          class=\"form-input\"                         placeholder=\"ç²è´´æ¨ç API Key æç¹å»ä¸æ¹çææ°ç\"                     />                     <button class=\"btn btn-small btn-test\" onclick=\"testApiKey()\">                         æµè¯å¹¶è·åå¯ç¨æ¨¡å                     </button>                 </div>             </div>                          <div class=\"result\" id=\"testResult\">                 <div id=\"testResultContent\"></div>             </div>         </div>                  <div class=\"section\">             <div class=\"section-title\">                 <span class=\"step-number\">2</span>                 çææ°ç API Key             </div>             <div class=\"section-content\">                 å¦ææ¨æ²¡æ API Keyï¼è¯·éè¿ç»å½çæï¼             </div>             <div class=\"url-box\">                 https://chat-backend.highlightai.com/api/v1/auth/signin?screenHint=sign-in             </div>             <button class=\"btn btn-secondary\" onclick=\"openLoginPage()\">                 æå¼ç»å½é¡µé¢             </button>                          <div style=\"background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; padding: 12px; margin: 12px 0; color: #856404; font-size: 14px;\">                 <strong>éè¦æç¤ºï¼</strong><br>                 1. ç¹å»ä¸æ¹æé®æå¼ç»å½é¡µé¢<br>                 2. å®æç»å½åï¼æµè§å¨ä¼è·³è½¬å°æ°é¡µé¢<br>                 3. å¨æµè§å¨å°åæ ä¸­æ¾å°ç±»ä¼¼è¿æ ·çé¾æ¥ï¼<br>                 <code style=\"background: #fff; padding: 2px 4px; border-radius: 3px;\">https://highlightai.com/deeplink?code=01CKIO2YTC359TRVJ1QVNQP21A</code><br>                 4. å¤å¶ <strong>code=</strong> åé¢çå¼ï¼å¦ï¼01CKIO2YTC359TRVJ1QVNQP21Aï¼<br>                 5. ç²è´´å°ä¸æ¹è¾å¥æ¡ä¸­             </div>                          <div class=\"form-group\">                 <label class=\"form-label\" for=\"codeInput\">ææä»£ç ï¼æµè§å¨å°åæ ä¸­ code= åé¢çå¼ï¼</label>                 <input                      type=\"text\"                      id=\"codeInput\"                      class=\"form-input\"                     placeholder=\"ä¾å¦ï¼01CKIO2YTC359TRVJ1QVNQP21A\"                 />             </div>                          <button class=\"btn\" onclick=\"login()\" id=\"loginBtn\">                 çæ API Key             </button>                          <div class=\"loading\" id=\"loading\">                 <span class=\"loading-spinner\"></span>                 æ­£å¨å¤ç...             </div>         </div>                  <div class=\"result\" id=\"result\">             <div id=\"resultContent\"></div>         </div>                  <div class=\"info-section\">             <div class=\"info-title\">API ç«¯ç¹</div>             <div style=\"font-size: 14px; color: #6e6e73; line-height: 1.5;\">                 <strong>æ¨¡ååè¡¨:</strong> GET /v1/models<br>                 <strong>è¯·æ±èå¤©:</strong> POST /v1/chat/completions<br>             </div>         </div>                  <div style=\"text-align: center; margin-top: 40px; padding: 20px; border-top: 1px solid #e5e5e7;\">             <div style=\"color: #6e6e73; font-size: 14px; margin-bottom: 8px;\">                 é¡¹ç®å¼æº Â· ç± <strong>ä¸æé±¼</strong> å¼å             </div>             <div style=\"margin-bottom: 12px;\">                 <a href=\"https://linux.do/u/462642146/summary\" target=\"_blank\" style=\"color: #007aff; text-decoration: none; font-size: 14px;\">                     ð Linux DO @ä¸æé±¼                 </a>             </div>             <div style=\"color: #a1a1a6; font-size: 12px;\">                 æè°¢ä½¿ç¨ Highlight 2 API ä»£çæå¡             </div>         </div>     </div>      <script>         function openLoginPage() {             window.open('https://chat-backend.highlightai.com/api/v1/auth/signin?screenHint=sign-in', '_blank');         }                  async function login() {             const codeInput = document.getElementById('codeInput');             const loginBtn = document.getElementById('loginBtn');             const loading = document.getElementById('loading');             const result = document.getElementById('result');             const resultContent = document.getElementById('resultContent');                          const code = codeInput.value.trim();             if (!code) {                 showResult('error', '<h4>éè¯¯</h4><p>è¯·è¾å¥ææä»£ç </p>');                 return;             }                          // æ¾ç¤ºå è½½ç¶æ             loginBtn.disabled = true;             loading.style.display = 'block';             result.style.display = 'none';                          try {                 const response = await fetch('/login', {                     method: 'POST',                     headers: {                         'Content-Type': 'application/json'                     },                     body: JSON.stringify({ code })                 });                                  const data = await response.json();                                  if (response.ok) {                     // ç»å½æåï¼çæ API Key                     const apiKey = btoa(JSON.stringify(data));                     showResult('success', \`                         <h4>ç»å½æå</h4>                         <p><strong>ç¨æ·ï¼</strong>\${data.email}</p>                         <p><strong>ç¨æ· IDï¼</strong>\${data.user_id}</p>                                                  <div class=\"api-key-section\">                             <div class=\"api-key-label\">æ¨ç API Key</div>                             <div class=\"api-key-box\" id=\"apiKeyText\">\${apiKey}</div>                             <button class=\"copy-btn\" onclick=\"copyApiKey()\">å¤å¶ API Key</button>                         </div>                                                  <div class=\"success-message\">                             <div class=\"success-title\">è®¾ç½®å®æ</div>                             <div class=\"success-content\">                                 æ¨ç°å¨å¯ä»¥ä½¿ç¨æ­¤ API Key è°ç¨ OpenAI å¼å®¹çæ¥å£ã<br>                                 è¯·å¨ Authorization header ä¸­æ·»å ï¼<br>                                 <code>Authorization: Bearer YOUR_API_KEY</code>                             </div>                         </div>                     \`);                                          // èªå¨å è½½æ¨¡ååè¡¨                     await loadModels(apiKey);                 } else {                     showResult('error', \`<h4>ç»å½å¤±è´¥</h4><p>\${data.error}</p>\`);                 }             } catch (error) {                 showResult('error', \`<h4>è¯·æ±å¤±è´¥</h4><p>\${error.message}</p>\`);             } finally {                 loginBtn.disabled = false;                 loading.style.display = 'none';             }         }                  function showResult(type, content) {             const result = document.getElementById('result');             const resultContent = document.getElementById('resultContent');                          result.className = \`result \${type}\`;             resultContent.innerHTML = content;             result.style.display = 'block';                          // å¹³æ»æ»å¨å°ç»æåºå             result.scrollIntoView({ behavior: 'smooth', block: 'center' });         }                  function copyApiKey() {             const apiKeyText = document.getElementById('apiKeyText').textContent;             navigator.clipboard.writeText(apiKeyText).then(() => {                 const btn = event.target;                 const originalText = btn.textContent;                 btn.textContent = 'å·²å¤å¶';                 setTimeout(() => {                     btn.textContent = originalText;                 }, 2000);             }).catch(err => {                 console.error('å¤å¶å¤±è´¥:', err);                 // å¤ç¨æ¹æ¡ï¼éä¸­ææ¬                 const selection = window.getSelection();                 const range = document.createRange();                 range.selectNodeContents(document.getElementById('apiKeyText'));                 selection.removeAllRanges();                 selection.addRange(range);             });         }                  async function testApiKey() {             const apiKeyInput = document.getElementById('apiKeyInput');             const testResult = document.getElementById('testResult');             const testResultContent = document.getElementById('testResultContent');                          const apiKey = apiKeyInput.value.trim();             if (!apiKey) {                 showTestResult('error', '<h4>éè¯¯</h4><p>è¯·åè¾å¥ API Key</p>');                 return;             }                          try {                 const response = await fetch('/v1/models', {                     headers: {                         'Authorization': \`Bearer \${apiKey}\`                     }                 });                                  if (response.ok) {                     const data = await response.json();                     showTestResult('success', \`                         <h4>API Key ææ</h4>                         <p>æåè·åå° \${data.data.length} ä¸ªå¯ç¨æ¨¡å</p>                     \`);                                          // èªå¨æ¾ç¤ºæ¨¡ååè¡¨                     displayModels(data.data);                 } else {                     const errorData = await response.json();                     showTestResult('error', \`<h4>API Key æ æ</h4><p>\${errorData.error || 'éªè¯å¤±è´¥'}</p>\`);                 }             } catch (error) {                 showTestResult('error', \`<h4>æµè¯å¤±è´¥</h4><p>\${error.message}</p>\`);             }         }                  function showTestResult(type, content) {             const testResult = document.getElementById('testResult');             const testResultContent = document.getElementById('testResultContent');                          testResult.className = \`result \${type}\`;             testResultContent.innerHTML = content;             testResult.style.display = 'block';         }                  async function loadModels(apiKey) {             const modelsList = document.getElementById('modelsList');                          // æ¾ç¤ºå è½½ç¶æ             modelsList.innerHTML = \`                 <div style=\"text-align: center; color: #6e6e73; padding: 16px;\">                     <span class=\"loading-spinner\" style=\"margin-right: 8px;\"></span>                     æ­£å¨å è½½æ¨¡ååè¡¨...                 </div>             \`;                          try {                 const response = await fetch('/v1/models', {                     headers: {                         'Authorization': \`Bearer \${apiKey}\`                     }                 });                                  if (response.ok) {                     const data = await response.json();                     displayModels(data.data);                 } else {                     modelsList.innerHTML = \`                         <div style=\"text-align: center; color: #dc2626; padding: 16px;\">                             å è½½å¤±è´¥ï¼è¯·æ£æ¥ API Key                         </div>                     \`;                 }             } catch (error) {                 modelsList.innerHTML = \`                     <div style=\"text-align: center; color: #dc2626; padding: 16px;\">                         ç½ç»éè¯¯: \${error.message}                     </div>                 \`;             }         }                  function displayModels(models) {             const modelsList = document.getElementById('modelsList');                          if (!models || models.length === 0) {                 modelsList.innerHTML = \`                     <div style=\"text-align: center; color: #6e6e73; padding: 16px;\">                         æªæ¾å°å¯ç¨æ¨¡å                     </div>                 \`;                 return;             }                          // ææä¾ååç»æ¨¡å             const modelsByProvider = models.reduce((acc, model) => {                 const provider = model.owned_by || 'Unknown';                 if (!acc[provider]) acc[provider] = [];                 acc[provider].push(model);                 return acc;             }, {});                          let html = '';             for (const [provider, providerModels] of Object.entries(modelsByProvider)) {                 html += \`                     <div style=\"margin-bottom: 16px;\">                         <div style=\"font-weight: 600; color: #1d1d1f; margin-bottom: 8px; font-size: 14px;\">                             \${provider} (\${providerModels.length} ä¸ªæ¨¡å)                         </div>                         <div class=\"models-grid\">                 \`;                                  providerModels.forEach(model => {                     html += \`                         <div class=\"model-item\">                             <div>                                 <div class=\"model-name\">\${model.id}</div>                                 <div class=\"model-provider\">\${provider}</div>                             </div>                             <button onclick=\"copyModelName('\${model.id}')\" class=\"btn btn-small copy-btn\">                                 å¤å¶                             </button>                         </div>                     \`;                 });                                  html += \`                         </div>                     </div>                 \`;             }                          modelsList.innerHTML = html;         }                  function copyModelName(modelName) {             navigator.clipboard.writeText(modelName).then(() => {                 // ä¸´æ¶æ¾ç¤ºå¤å¶æåçåé¦                 const btn = event.target;                 const originalText = btn.textContent;                 btn.textContent = 'å·²å¤å¶';                 btn.style.background = '#bbf7d0';                 btn.style.color = '#166534';                 setTimeout(() => {                     btn.textContent = originalText;                     btn.style.background = '#007aff';                     btn.style.color = 'white';                 }, 1500);             }).catch(err => {                 console.error('å¤å¶å¤±è´¥:', err);             });         }                  // é¡µé¢å è½½æ¶æ£æ¥æ¯å¦æAPI Key         document.addEventListener('DOMContentLoaded', function() {             const apiKeyInput = document.getElementById('apiKeyInput');                          // çå¬API Keyè¾å¥åå             apiKeyInput.addEventListener('input', function() {                 const apiKey = this.value.trim();                 if (apiKey) {                     // èªå¨å è½½æ¨¡ååè¡¨                     loadModels(apiKey);                 } else {                     const modelsList = document.getElementById('modelsList');                     modelsList.innerHTML = \`                         <div style=\"text-align: center; color: #6e6e73; padding: 20px;\">                             è¯·åè·å API Key ä»¥æ¥çå¯ç¨æ¨¡å                         </div>                     \`;                 }             });                          // åè½¦é®æäº¤             document.getElementById('codeInput').addEventListener('keypress', function(e) {                 if (e.key === 'Enter') {                     login();                 }             });                          document.getElementById('apiKeyInput').addEventListener('keypress', function(e) {                 if (e.key === 'Enter') {                     testApiKey();                 }             });         });     </script> </body> </html>     `;          return new Response(html, {        headers: {          \"Content-Type\": \"text/html; charset=utf-8\",         ...getCorsHeaders()       }     });   }      // å¥åº·æ£æ¥   if (path === \"/health\") {     return new Response(JSON.stringify({       status: \"healthy\",       timestamp: Math.floor(Date.now() / 1000)     }), {       headers: {          \"Content-Type\": \"application/json\",         ...getCorsHeaders()       }     });   }      // ç»å½ç«¯ç¹   if (path === \"/login\" && request.method === \"POST\") {     try {       const body = await request.json();       const code = body.code;       if (!code) {         return new Response(JSON.stringify({ error: \"Missing code parameter\" }), {           status: 400,           headers: {              \"Content-Type\": \"application/json\",             ...getCorsHeaders()           }         });       }              const userInfo = await login(code);       return new Response(JSON.stringify(userInfo), {         headers: {            \"Content-Type\": \"application/json\",           ...getCorsHeaders()         }       });     } catch (error) {       return new Response(JSON.stringify({ error: error.message }), {         status: 500,         headers: {            \"Content-Type\": \"application/json\",           ...getCorsHeaders()         }       });     }   }      // è·åBearer token   const authHeader = request.headers.get(\"Authorization\");   if (!authHeader || !authHeader.startsWith(\"Bearer \")) {     return new Response(JSON.stringify({ error: \"Missing authorization token\" }), {       status: 401,       headers: {          \"Content-Type\": \"application/json\",         ...getCorsHeaders()       }     });   }      const token = authHeader.substring(7);   const userInfo = parseApiKey(token);   if (!userInfo || !userInfo.rt) {     return new Response(JSON.stringify({ error: \"Invalid authorization token\" }), {       status: 401,       headers: {          \"Content-Type\": \"application/json\",         ...getCorsHeaders()       }     });   }      // æ¨¡ååè¡¨   if (path === \"/v1/models\" && request.method === \"GET\") {     try {       const accessToken = await getAccessToken(userInfo.rt);       const models = await getModels(accessToken);              const modelList = Array.from(models.entries()).map(([modelName, modelInfo]) => ({         id: modelName,         object: \"model\",         created: Math.floor(Date.now() / 1000),         owned_by: modelInfo.provider,       }));              return new Response(JSON.stringify({         object: \"list\",         data: modelList       }), {         headers: {            \"Content-Type\": \"application/json\",           ...getCorsHeaders()         }       });     } catch (error) {       return new Response(JSON.stringify({ error: error.message }), {         status: 500,         headers: {            \"Content-Type\": \"application/json\",           ...getCorsHeaders()         }       });     }   }      // èå¤©å®æ   if (path === \"/v1/chat/completions\" && request.method === \"POST\") {     try {       const reqData: ChatCompletionRequest = await request.json();              if (!userInfo.user_id || !userInfo.client_uuid) {         return new Response(JSON.stringify({ error: \"Invalid authorization token - missing required fields\" }), {           status: 401,           headers: {              \"Content-Type\": \"application/json\",             ...getCorsHeaders()           }         });       }              const accessToken = await getAccessToken(userInfo.rt);       const models = await getModels(accessToken);       const modelInfo = models.get(reqData.model || \"gpt-4o\");              if (!modelInfo) {         return new Response(JSON.stringify({ error: `Model '${reqData.model}' not found` }), {           status: 400,           headers: {              \"Content-Type\": \"application/json\",             ...getCorsHeaders()           }         });       }              const prompt = formatMessagesToPrompt(reqData.messages);       const tools = formatOpenAITools(reqData.tools);       const identifier = await getIdentifier(userInfo.user_id, userInfo.client_uuid);              const highlightData = {         prompt: prompt,         attachedContext: [],         modelId: modelInfo.id,         additionalTools: tools,         backendPlugins: [],         useMemory: false,         useKnowledge: false,         ephemeral: false,         timezone: \"Asia/Hong_Kong\",       };              const headers = getHighlightHeaders(accessToken, identifier);              if (reqData.stream) {         // æµå¼ååº         const readable = new ReadableStream({           async start(controller) {             try {               const response = await fetch(`${HIGHLIGHT_BASE_URL}/api/v1/chat`, {                 method: 'POST',                 headers: headers,                 body: JSON.stringify(highlightData),               });                              if (!response.ok) {                 controller.enqueue(new TextEncoder().encode(`data: ${JSON.stringify({                   error: { message: `Highlight API returned status code ${response.status}`, type: \"api_error\" }                 })}\n\n`));                 controller.close();                 return;               }                              const responseId = `chatcmpl-${crypto.randomUUID()}`;               const created = Math.floor(Date.now() / 1000);                              // åéåå§æ¶æ¯               const initialChunk = {                 id: responseId,                 object: \"chat.completion.chunk\",                 created: created,                 model: reqData.model || \"gpt-4o\",                 choices: [{                   index: 0,                   delta: { role: \"assistant\" },                   finish_reason: null,                 }],               };               controller.enqueue(new TextEncoder().encode(`data: ${JSON.stringify(initialChunk)}\n\n`));                              const reader = response.body?.getReader();               if (!reader) return;                              let buffer = \"\";               while (true) {                 const { done, value } = await reader.read();                 if (done) break;                                  buffer += new TextDecoder().decode(value);                                  while (buffer.includes(\"\n\")) {                   const lineEnd = buffer.indexOf(\"\n\");                   const line = buffer.substring(0, lineEnd);                   buffer = buffer.substring(lineEnd + 1);                                      if (line.startsWith(\"data: \")) {                     const data = line.substring(6).trim();                     if (data) {                       try {                         const eventData = JSON.parse(data);                         if (eventData.type === \"text\") {                           const content = eventData.content || \"\";                           if (content) {                             const chunkData = {                               id: responseId,                               object: \"chat.completion.chunk\",                               created: created,                               model: reqData.model || \"gpt-4o\",                               choices: [{                                 index: 0,                                 delta: { content: content },                                 finish_reason: null,                               }],                             };                             controller.enqueue(new TextEncoder().encode(`data: ${JSON.stringify(chunkData)}\n\n`));                           }                         }                       } catch {                         // å¿½ç¥æ æçJSONæ°æ®                       }                     }                   }                 }               }                              // åéå®ææ¶æ¯               const finalChunk = {                 id: responseId,                 object: \"chat.completion.chunk\",                 created: created,                 model: reqData.model || \"gpt-4o\",                 choices: [{ index: 0, delta: {}, finish_reason: \"stop\" }],               };               controller.enqueue(new TextEncoder().encode(`data: ${JSON.stringify(finalChunk)}\n\n`));               controller.enqueue(new TextEncoder().encode(\"data: [DONE]\n\n\"));               controller.close();             } catch (error) {               controller.enqueue(new TextEncoder().encode(`data: ${JSON.stringify({                 error: { message: error.message, type: \"server_error\" }               })}\n\n`));               controller.close();             }           }         });                  return new Response(readable, {           headers: {             \"Content-Type\": \"text/event-stream\",             \"Cache-Control\": \"no-cache\",             \"Connection\": \"keep-alive\",             ...getCorsHeaders()           },         });       } else {         // éæµå¼ååº         const response = await fetch(`${HIGHLIGHT_BASE_URL}/api/v1/chat`, {           method: 'POST',           headers: headers,           body: JSON.stringify(highlightData),         });                  if (!response.ok) {           return new Response(JSON.stringify({             error: { message: `Highlight API returned status code ${response.status}`, type: \"api_error\" }           }), {             status: response.status,             headers: {                \"Content-Type\": \"application/json\",               ...getCorsHeaders()             }           });         }                  let fullResponse = \"\";         const reader = response.body?.getReader();         if (reader) {           let buffer = \"\";           while (true) {             const { done, value } = await reader.read();             if (done) break;                          buffer += new TextDecoder().decode(value);                          while (buffer.includes(\"\n\")) {               const lineEnd = buffer.indexOf(\"\n\");               const line = buffer.substring(0, lineEnd);               buffer = buffer.substring(lineEnd + 1);                              if (line.startsWith(\"data: \")) {                 const data = line.substring(6).trim();                 if (data) {                   try {                     const eventData = JSON.parse(data);                     if (eventData.type === \"text\") {                       fullResponse += eventData.content || \"\";                     }                   } catch {                     // å¿½ç¥æ æçJSONæ°æ®                   }                 }               }             }           }         }                  const responseId = `chatcmpl-${crypto.randomUUID()}`;         const responseData = {           id: responseId,           object: \"chat.completion\",           created: Math.floor(Date.now() / 1000),           model: reqData.model || \"gpt-4o\",           choices: [{             index: 0,             message: { role: \"assistant\", content: fullResponse },             finish_reason: \"stop\",           }],           usage: { prompt_tokens: 0, completion_tokens: 0, total_tokens: 0 },         };                  return new Response(JSON.stringify(responseData), {           headers: {              \"Content-Type\": \"application/json\",             ...getCorsHeaders()           }         });       }     } catch (error) {       return new Response(JSON.stringify({ error: error.message }), {         status: 500,         headers: {            \"Content-Type\": \"application/json\",           ...getCorsHeaders()         }       });     }   }      return new Response(\"Not Found\", {      status: 404,     headers: getCorsHeaders()   }); }  // ä¸»å½æ° async function main() {   // æ£æ¥æ¯å¦æå½ä»¤è¡åæ°ç¨äºç»å½   const args = globalThis.Deno?.args || [];   if (args.length > 0 && args[0] === \"login\") {     if (args.length < 2) {       console.log(\"ä½¿ç¨æ¹æ³: deno run --allow-net --allow-env highlight-api-deno.ts login <code>\");       console.log(\"æµè§å¨æå¼: https://chat-backend.highlightai.com/api/v1/auth/signin?screenHint=sign-in\");       console.log(\"å®æç»å½åå¤å¶ code åæ°å¼\");       globalThis.Deno?.exit(1);       return;     }          const code = args[1];     try {       await login(code);     } catch (error) {       console.error(\"ç»å½å¤±è´¥:\", (error as Error).message);       globalThis.Deno?.exit(1);       return;     }     return;   }      // å¯å¨HTTPæå¡å¨   const port = parseInt(globalThis.Deno?.env.get(\"PORT\") || \"8080\");   console.log(`Highlight AI API ä»£çæå¡å¨å¯å¨å¨ç«¯å£ ${port}`);   console.log(`å¥åº·æ£æ¥: http://localhost:${port}/health`);   console.log(`ç»å½ç«¯ç¹: POST http://localhost:${port}/login`);   console.log(`æ¨¡ååè¡¨: GET http://localhost:${port}/v1/models`);   console.log(`èå¤©å®æ: POST http://localhost:${port}/v1/chat/completions`);      await serve(handleRequest, { port }); }  // @ts-ignore if (import.meta.main) {   main(); }"

      - name: Upload to Deno Deploy
        uses: denoland/deployctl@v1
        with:
          project: "lilo-lilogithubi-89"
          entrypoint: "main.ts"
          root: "."
          
          
